diff -ruN 747-8i/747-8f-set.xml 747-8i.new/747-8f-set.xml
--- 747-8i/747-8f-set.xml	2015-01-20 03:42:28.000000000 +0800
+++ 747-8i.new/747-8f-set.xml	2015-06-11 21:59:26.305368055 +0800
@@ -272,13 +272,13 @@
 
 		<weight n="0">
         	    <name>Crew</name>
-        	    <weight-lb type="double">400</weight-lb>
+        	    <weight-lb type="double">600</weight-lb>
         	    <max-lb type="double">600</max-lb>
         	    <min-lb type="double">300</min-lb>
         	</weight>
 		<weight n="1">
 		    <name>Cargo</name>
-		    <weight-lb type="double">90000.0</weight-lb>
+		    <weight-lb type="double">291800.0</weight-lb>
 		    <max-lb type="double">291800.0</max-lb>
 		    <min-lb type="double">0.0</min-lb>
 		</weight>
@@ -312,6 +312,7 @@
 		<maximum-landing-mass-lbs>763000</maximum-landing-mass-lbs>
 		<maximum-zero-fuel-mass-lbs>727000</maximum-zero-fuel-mass-lbs>
 	    </mass-and-balance>
+		<estimated-range-nm>3700</estimated-range-nm>
 	</limits>
 
 	<aircraft>
diff -ruN 747-8i/747-8i-set.xml 747-8i.new/747-8i-set.xml
--- 747-8i/747-8i-set.xml	2015-01-20 03:42:28.000000000 +0800
+++ 747-8i.new/747-8i-set.xml	2015-06-11 21:53:29.489366041 +0800
@@ -287,13 +287,13 @@
 
 		<weight n="0">
         	    <name>Crew</name>
-        	    <weight-lb type="double">400</weight-lb>
+        	    <weight-lb type="double">600</weight-lb>
         	    <max-lb type="double">600</max-lb>
         	    <min-lb type="double">300</min-lb>
         	</weight>
 		<weight n="1">
 		    <name>Passengers/Baggage/Cargo</name>
-		    <weight-lb type="double">90000.0</weight-lb>
+		    <weight-lb type="double">165100.0</weight-lb>
 		    <max-lb type="double">165100.0</max-lb>
 		    <min-lb type="double">0.0</min-lb>
 		</weight>
@@ -335,6 +335,7 @@
 		<maximum-landing-mass-lbs>688000</maximum-landing-mass-lbs>
 		<maximum-zero-fuel-mass-lbs>651000</maximum-zero-fuel-mass-lbs>
 	    </mass-and-balance>
+		<estimated-range-nm>7600</estimated-range-nm>
 	</limits>
 
 	<aircraft>
diff -ruN 747-8i/747-8-main.xml 747-8i.new/747-8-main.xml
--- 747-8i/747-8-main.xml	2015-01-20 03:42:29.000000000 +0800
+++ 747-8i.new/747-8-main.xml	2015-03-14 17:41:30.301413356 +0800
@@ -521,6 +521,7 @@
 			<file>Aircraft/747-8i/Nasal/IRS-controls.nas</file>
             		<file>Aircraft/747-8i/Nasal/runway.nas</file>
 			<file>Aircraft/747-8i/Nasal/system.nas</file>
+			<file>Aircraft/747-8i/Nasal/auto_refuel.nas</file>
 		</Boeing747>
 		  	  
 		<cdu>
diff -ruN 747-8i/Nasal/AFDS.nas 747-8i.new/Nasal/AFDS.nas
--- 747-8i/Nasal/AFDS.nas	2015-01-20 03:42:28.000000000 +0800
+++ 747-8i.new/Nasal/AFDS.nas	2015-03-08 20:31:10.995761802 +0800
@@ -401,72 +401,17 @@
             }
 	    if (!me.at1.getBoolValue()) me.autothrottle_mode.setValue(0);
         }elsif(me.step==5){
-	    max_wpt=getprop("/autopilot/route-manager/route/num");
-	    atm_wpt=getprop("/autopilot/route-manager/current-wp");
-	    if ((atm_wpt < 0 or atm_wpt >= max_wpt) and getprop("autopilot/route-manager/active"))
-		setprop("autopilot/route-manager/active",0);
-
-	    if (getprop("/autopilot/route-manager/active") and getprop("/autopilot/route-manager/route/num") >= 2) {
-
-	    	if(atm_wpt < (max_wpt - 1)) {
-		    me.remaining_distance.setValue(getprop("/autopilot/route-manager/wp/remaining-distance-nm") + getprop("autopilot/route-manager/wp/dist"));
-#		    var next_course = getprop("/autopilot/route-manager/wp[1]/bearing-deg");
-	    	} else {
-		    me.remaining_distance.setValue(getprop("autopilot/route-manager/wp/dist"));
-	    	}
-
-		var groundspeed = getprop("/velocities/groundspeed-kt");
-		var f = flightplan();
-		var targetCourse = f.pathGeod(-1, -me.remaining_distance.getValue());
-		var leg = f.currentWP();
-		var enroute = leg.courseAndDistanceFrom(targetCourse);
-		setprop("autopilot/internal/course-deg", enroute[0]);
-
-		var courseCoord = geo.Coord.new().set_latlon(targetCourse.lat, targetCourse.lon);
-		var geocoord = geo.aircraft_position();
-		var CourseError = (geocoord.course_to(courseCoord) - getprop("orientation/heading-deg"));
-		if(CourseError < -180) CourseError += 360;
-		elsif(CourseError > 180) CourseError -= 360;
-		if(CourseError > 0) {
-		    CourseError = geocoord.distance_to(courseCoord);
-		} else {
-		    CourseError = (geocoord.distance_to(courseCoord) * -1);
-		}
-		var cCourseError = CourseError * 0.01;
-		if(cCourseError > 8.0) cCourseError = 8.0;
-		elsif(cCourseError < -8.0) cCourseError = -8.0;
-		setprop("autopilot/internal/course-error", cCourseError);
-
-		if(enroute[1] != nil)   # Course deg
-		{
-		    var wpt_eta = (enroute[1] / groundspeed * 3600);
-		    var brg_err = getprop("/autopilot/route-manager/wp/true-bearing-deg") - getprop("/orientation/heading-deg");
-		    if (brg_err < 0) {
-			brg_err = brg_err + 360;
-		    }
-		    var wp_lead = 30;
-		    if (getprop("instrumentation/airspeed-indicator/indicated-speed-kt") < 240 and getprop("position/altitude-ft") < 10000) {
-			wp_lead = 8;
-			brg_err = 0;
-		    }
-		    brg_err = math.pi * (brg_err / 180);
-		    if (enroute[1] < 16) {
-			wpt_eta = abs(wpt_eta * math.cos(brg_err));
-		    }
-
-		    if((getprop("gear/gear[1]/wow") == 0) and (getprop("gear/gear[2]/wow") == 0)) {
-			var change_wp = abs(getprop("/autopilot/route-manager/wp[1]/bearing-deg") - getprop("orientation/heading-magnetic-deg"));
-		    	if(change_wp > 180) change_wp = (360 - change_wp);
-		    	if (((me.heading_change_rate * change_wp) > wpt_eta) or (wpt_eta < wp_lead)) {
-			    if(atm_wpt < (max_wpt - 1)) {
-			    	atm_wpt += 1;
-			    	props.globals.getNode("/autopilot/route-manager/current-wp").setValue(atm_wpt);
-			    }
-		    	}
-		    }
-		}
-	    }
-
+			if (getprop("/autopilot/route-manager/active")){
+				max_wpt=getprop("/autopilot/route-manager/route/num");
+				atm_wpt=getprop("/autopilot/route-manager/current-wp");
+				max_wpt-=1;
+				if (getprop("/autopilot/route-manager/wp/eta")=="0:37" and getprop("/autopilot/route-manager/wp/dist")<20){
+					if (getprop("/autopilot/route-manager/current-wp")<=max_wpt){
+						atm_wpt+=1;
+						props.globals.getNode("/autopilot/route-manager/current-wp").setValue(atm_wpt);
+					}
+				}				
+			}
 	}elsif(me.step==6){
 			ma_spd=getprop("/velocities/mach");
 			banklimit=getprop("/instrumentation/afds/inputs/bank-limit-switch");
diff -ruN 747-8i/Nasal/auto_refuel.nas 747-8i.new/Nasal/auto_refuel.nas
--- 747-8i/Nasal/auto_refuel.nas	1970-01-01 08:00:00.000000000 +0800
+++ 747-8i.new/Nasal/auto_refuel.nas	2015-03-14 21:39:39.581645008 +0800
@@ -0,0 +1,299 @@
+var fuel_up = func(stage) {
+	var tot_level = props.globals.getNode("consumables/fuel/total-fuel-gal_us",1);
+	var cap0 = props.globals.getNode("consumables/fuel/tank/capacity-gal_us",1);
+	var cap1 = props.globals.getNode("consumables/fuel/tank[1]/capacity-gal_us",1);
+	var cap2 = props.globals.getNode("consumables/fuel/tank[2]/capacity-gal_us",1);
+	var cap3 = props.globals.getNode("consumables/fuel/tank[3]/capacity-gal_us",1);
+	var cap4 = props.globals.getNode("consumables/fuel/tank[4]/capacity-gal_us",1);
+	var cap5 = props.globals.getNode("consumables/fuel/tank[5]/capacity-gal_us",1);
+	var cap6 = props.globals.getNode("consumables/fuel/tank[6]/capacity-gal_us",1);
+	var cap7 = props.globals.getNode("consumables/fuel/tank[7]/capacity-gal_us",1);
+	var lev0 = props.globals.getNode("consumables/fuel/tank/level-gal_us",1);
+	var lev1 = props.globals.getNode("consumables/fuel/tank[1]/level-gal_us",1);
+	var lev2 = props.globals.getNode("consumables/fuel/tank[2]/level-gal_us",1);
+	var lev3 = props.globals.getNode("consumables/fuel/tank[3]/level-gal_us",1);
+	var lev4 = props.globals.getNode("consumables/fuel/tank[4]/level-gal_us",1);
+	var lev5 = props.globals.getNode("consumables/fuel/tank[5]/level-gal_us",1);
+	var lev6 = props.globals.getNode("consumables/fuel/tank[6]/level-gal_us",1);
+	var lev7 = props.globals.getNode("consumables/fuel/tank[7]/level-gal_us",1);
+	var density1 = props.globals.getNode("consumables/fuel/tank[1]/density-ppg",1);
+	var density2 = props.globals.getNode("consumables/fuel/tank[2]/density-ppg",1);
+	var density3 = props.globals.getNode("consumables/fuel/tank[3]/density-ppg",1);
+	var density4 = props.globals.getNode("consumables/fuel/tank[4]/density-ppg",1);
+	var density5 = props.globals.getNode("consumables/fuel/tank[5]/density-ppg",1);
+	var density6 = props.globals.getNode("consumables/fuel/tank[6]/density-ppg",1);
+	var density7 = props.globals.getNode("consumables/fuel/tank[7]/density-ppg",1);
+		
+	var target_lev = props.globals.getNode("controls/groundservice/fueling/target-gal_us",1);
+
+	var rate = 20;
+	if (tot_level.getValue() < (target_lev.getValue() - (0.8*rate))) {
+	# Fuel up
+	if (stage == 0) {
+		var irate = rate / 3;
+		if (lev1.getValue() < (100 / density1.getValue())) {
+		lev1.setValue(lev1.getValue() + irate);
+		} else {
+		stage = 1;
+		}
+	}
+
+	if (stage == 1) {
+		var flag = 2;
+		var irate = rate / 2;
+		if (lev1.getValue() < (500 / density1.getValue())) {
+		lev1.setValue(lev1.getValue() + irate);
+		} else {
+		flag = flag - 1;
+		}
+		if (lev2.getValue() < (500 / density2.getValue())) {
+		lev2.setValue(lev2.getValue() + irate);
+		} else {
+		flag = flag - 1;
+		}
+
+		if (flag == 0) stage = 2;
+	}
+
+	if (stage == 2) {
+		var flag = 4;
+		var irate = rate / flag;
+		if (lev3.getValue() < (10000 / density3.getValue())) {
+		lev3.setValue(lev3.getValue() + irate);
+		} else {
+		flag = flag - 1;
+		irate = rate / flag;
+		}
+		if (lev4.getValue() < (10000 / density4.getValue())) {
+		lev4.setValue(lev4.getValue() + irate);
+		} else {
+		flag = flag - 1;
+		irate = rate / flag;
+		}
+		if (lev1.getValue() < ((500 / density1.getValue()) + lev3.getValue())) {
+		lev1.setValue(lev1.getValue() + irate);
+		} else {
+		flag = flag - 1;
+		irate = rate / flag;
+		}
+		if (lev2.getValue() < ((500 / density2.getValue()) + lev4.getValue())) {
+		lev2.setValue(lev2.getValue() + irate);
+		} else {
+		flag = flag - 1;
+		}
+
+		if (flag == 0) stage = 3;
+	}
+
+	if (stage == 3) {
+		var flag = 8;
+		var irate = rate / flag;
+		if (lev5.getValue() < (cap5.getValue() - irate)) {
+		lev5.setValue(lev5.getValue() + irate);
+		} else {
+		lev5.setValue(cap5.getValue());
+		flag = flag - 1;
+		irate = rate / flag;
+		}
+		if (lev6.getValue() < (cap6.getValue() - irate)) {
+		lev6.setValue(lev6.getValue() + irate);
+		} else {
+		lev6.setValue(cap6.getValue());
+		flag = flag - 1;
+		irate = rate / flag;
+		}
+		if (lev3.getValue() < (cap3.getValue() - irate)) {
+		lev3.setValue(lev3.getValue() + irate);
+		} else {
+		lev3.setValue(cap3.getValue());
+		flag = flag - 1;
+		irate = rate / flag;
+		}
+		if (lev4.getValue() < (cap4.getValue() - irate)) {
+		lev4.setValue(lev4.getValue() + irate);
+		} else {
+		lev4.setValue(cap4.getValue());
+		flag = flag - 1;
+		irate = rate / flag;
+		}
+		if (lev1.getValue() < ((500 / density1.getValue()) + cap3.getValue() + cap5.getValue())) {
+		lev1.setValue(lev1.getValue() + (2 * irate));
+		} else {
+		flag = flag - 2;
+		irate = rate / flag;
+		}
+		if (lev2.getValue() < ((500 / density2.getValue()) + cap4.getValue() + cap6.getValue())) {
+		lev2.setValue(lev2.getValue() + (2 * irate));
+		} else {
+		flag = flag - 2;
+		}
+		if (flag == 0) stage = 4;
+	}
+
+	if (stage == 4) {
+		var flag = 2;
+		var irate = rate / flag;
+		if (lev1.getValue() < (cap1.getValue() - irate)) {
+		lev1.setValue(lev1.getValue() + irate);
+		} else {
+		lev1.setValue(cap1.getValue());
+		flag = flag - 1;
+		irate = rate / flag;
+		}
+		if (lev2.getValue() < (cap2.getValue() - irate)) {
+		lev2.setValue(lev2.getValue() + irate);
+		} else {
+		lev2.setValue(cap2.getValue());
+		flag = flag - 1;
+		}
+		if (flag == 0) stage = 5;
+	}		    
+
+	if (stage == 5) {
+		var irate = rate;
+		if (lev0.getValue() < (cap0.getValue() - irate)) {
+		lev0.setValue(lev0.getValue() + irate);
+		} else {
+		lev0.setValue(cap0.getValue());
+		stage = 6;
+		}
+	}
+
+	if (stage == 6) {
+		var irate = rate;
+		if (lev7.getValue() < (cap7.getValue() - irate)) {
+		lev7.setValue(lev7.getValue() + irate);
+		} else {
+		lev7.setValue(cap7.getValue());
+		}
+	}
+	return stage;
+
+	} elsif (tot_level.getValue() > (target_lev.getValue() + (0.8*rate))) {
+	# Drain tanks
+	if (stage == 0) {
+		var flag = 2;
+		var irate = rate / flag;
+		if (lev7.getValue() > irate) {
+		lev7.setValue(lev7.getValue() - irate);
+		} else {
+		lev7.setValue(0);
+		flag = flag - 1;
+		irate = rate / flag;
+		}
+		if (lev0.getValue() > irate) {
+		lev0.setValue(lev0.getValue() - irate);
+		} else {
+		lev0.setValue(0);
+		flag = flag - 1;
+		}
+		if (flag == 0) stage = 1;
+	}
+
+	if (stage == 1) {
+		var flag = 2;
+		var irate = rate / flag;
+		if (lev1.getValue() > lev3.getValue() + (500 / density1.getValue())) {
+		lev1.setValue(lev1.getValue() - irate);
+		} else {
+		flag = flag - 1;
+		irate = rate / flag;
+		}
+		if (lev2.getValue() > lev4.getValue() + (500 / density2.getValue())) {
+		lev2.setValue(lev2.getValue() - irate);
+		} else {
+		flag = flag - 1;
+		irate = rate / flag;
+		}
+		if (flag == 0) stage = 2;
+	}
+
+	if (stage == 2) {
+		var flag = 6;
+		var irate = rate / flag;
+		if (lev5.getValue() > irate) {
+		lev5.setValue(lev5.getValue() - irate);
+		} else {
+		lev5.setValue(0);
+		flag = flag - 1;
+		irate = rate / flag;
+		}
+		if (lev6.getValue() > irate) {
+		lev6.setValue(lev6.getValue() - irate);
+		} else {
+		lev6.setValue(0);
+		flag = flag - 1;
+		irate = rate / flag;
+		}
+		if (lev1.getValue() > (lev3.getValue() + (500 / density1.getValue()))) {
+		lev1.setValue(lev1.getValue() - irate);
+		} else {
+		flag = flag - 1;
+		irate = rate / flag;
+		}
+		if (lev2.getValue() > (lev4.getValue() + (500 / density2.getValue()))) {
+		lev2.setValue(lev2.getValue() - irate);
+		} else {
+		flag = flag - 1;
+		irate = rate / flag;
+		}
+		if (lev3.getValue() > irate) {
+		lev3.setValue(lev3.getValue() - irate);
+		} else {
+		lev3.setValue(0);
+		flag = flag - 1;
+		irate = rate / flag;
+		}
+		if (lev4.getValue() > irate) {
+		lev4.setValue(lev4.getValue() - irate);
+		} else {
+		lev4.setValue(0);
+		flag = flag - 1;
+		}
+	}
+	return stage;
+	
+	} else {
+	# Active / level loop
+		Boeing747.copilot.announce("Fuel transfer complete.");
+	}
+	# Active / level loop
+	return -1;
+}
+
+var l_auto_refuel = setlistener('/autopilot/route-manager/active', func {
+	if (!getprop('/autopilot/route-manager/active')) {
+		return;
+	}
+
+	var range = getprop('/limits/estimated-range-nm');
+	var route_len = getprop('/autopilot/route-manager/total-distance');
+	var fuel_norm = route_len / range;
+	if (fuel_norm > 1.0) {
+		fuel_norm = 1.0;
+	} else if (fuel_norm < 0.1) {
+		fuel_norm = 0.1;
+	}
+
+	var cap0 = getprop("consumables/fuel/tank/capacity-gal_us") * getprop('/consumables/fuel/tank/density-ppg');
+	var cap1 = getprop("consumables/fuel/tank[1]/capacity-gal_us") * getprop('/consumables/fuel/tank[1]/density-ppg');;
+	var cap2 = getprop("consumables/fuel/tank[2]/capacity-gal_us") * getprop('/consumables/fuel/tank[2]/density-ppg');;
+	var cap3 = getprop("consumables/fuel/tank[3]/capacity-gal_us") * getprop('/consumables/fuel/tank[3]/density-ppg');;
+	var cap4 = getprop("consumables/fuel/tank[4]/capacity-gal_us") * getprop('/consumables/fuel/tank[4]/density-ppg');;
+	var cap5 = getprop("consumables/fuel/tank[5]/capacity-gal_us") * getprop('/consumables/fuel/tank[5]/density-ppg');;
+	var cap6 = getprop("consumables/fuel/tank[6]/capacity-gal_us") * getprop('/consumables/fuel/tank[6]/density-ppg');;
+	var cap7 = getprop("consumables/fuel/tank[7]/capacity-gal_us") * getprop('/consumables/fuel/tank[7]/density-ppg');;
+
+	var total_cap = cap0 + cap1 + cap2 + cap3 + cap4 + cap5 + cap6 + cap7;
+	var target_fuel = total_cap * fuel_norm;
+	setprop("controls/groundservice/fueling/target-lbs", total_cap * fuel_norm);
+	var stage = 0;
+	while (stage >= 0) {
+		stage = fuel_up(stage);
+		setprop("controls/groundservice/fueling/remain-lbs",(getprop("controls/groundservice/fueling/target-lbs") - getprop("consumables/fuel/total-fuel-lbs")));
+	}
+
+	removelistener(l_auto_refuel);
+	print('Aircraft refueled.');
+});
+
diff -ruN 747-8i/Systems/747-8-autopilot.xml 747-8i.new/Systems/747-8-autopilot.xml
--- 747-8i/Systems/747-8-autopilot.xml	2015-01-20 03:42:29.000000000 +0800
+++ 747-8i.new/Systems/747-8-autopilot.xml	2015-03-08 20:12:37.799731991 +0800
@@ -254,8 +254,7 @@
       <value>LNAV</value>
     </enable>
     <input>
-      <!--prop>/autopilot/internal/waypoint-bearing-error-deg</prop-->
-      <prop>/autopilot/internal/course-error-deg</prop>
+      <prop>/autopilot/internal/true-heading-error-deg</prop>
     </input>
     <reference>
       <value>0</value>
@@ -480,7 +479,7 @@
         <value>-16.67</value>
       </u_min>
       <u_max>
-        <value>33.33</value>
+        <value>16.67</value>
       </u_max>
     </config>
    </pi-simple-controller>
@@ -552,7 +551,7 @@
         <value>-16.67</value>
       </u_min>
       <u_max>
-        <value>33.33</value>
+        <value>16.67</value>
       </u_max>
     </config>
   </pi-simple-controller>
@@ -622,7 +621,7 @@
         <value>-16.67</value>
       </u_min>
       <u_max>
-        <value>33.33</value>
+        <value>16.67</value>
       </u_max>
     </config>
   </pi-simple-controller>
