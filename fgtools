#!/usr/bin/python
#encoding=UTF-8

from telnetlib import Telnet
import sys
import socket
import re
from string import split, join
import time
import os
 
__all__ = ["FlightGear"]
CRLF = '\r\n'
class FGTelnet(Telnet):
    def __init__(self,host,port):
        Telnet.__init__(self,host,port)
        self.prompt = []
        self.prompt.append( re.compile('/[^>]*> ') )
        self.timeout = 5
        #Telnet.set_debuglevel(self,2)
 
    def help(self):
        return
 
    def ls(self,dir=None):
        """
        Returns a list of properties.
        """
        if dir == None:
            self._putcmd('ls')
        else:
            self._putcmd('ls %s' % dir )
        return self._getresp()
 
    def dump(self):
        """Dump current state as XML."""
        self._putcmd('dump')
        return self._getresp()
 
    def cd(self, dir):
        """Change directory."""
        self._putcmd('cd ' + dir)
        self._getresp()
        return
 
    def pwd(self):
        """Display current path."""
        self._putcmd('pwd')
        return self._getresp()
 
    def get(self,var):
        """Retrieve the value of a parameter."""
        self._putcmd('get %s' % var )
        return self._getresp()
 
    def set(self,var,value):
        """Set variable to a new value"""
        self._putcmd('set %s %s' % (var,value))
        self._getresp() # Discard response

    def run(self,command):
        """Run fgcommand."""
        self._putcmd('run %s' % command )
        return self._getresp()
 
    def quit(self):
        """Terminate connection"""
        self._putcmd('quit')
        self.close()
        return
 
    # Internal: send one command to FlightGear
    def _putcmd(self,cmd):
        cmd = cmd + CRLF;
        Telnet.write(self, cmd)
        return
 
    # Internal: get a response from FlightGear
    def _getresp(self):
        (i,match,resp) = Telnet.expect(self, self.prompt, self.timeout)
        # Remove the terminating prompt.
        # Everything preceding it is the response.
        return split(resp, '\n')[:-1]
 
class FlightGear:
    """FlightGear interface class.
 
    An instance of this class represents a connection to a FlightGear telnet
    server.
 
    Properties are accessed using a dictionary style interface:
    For example:
 
    # Connect to flightgear telnet server.
    fg = FlightGear('myhost', 5500)
    # parking brake on
    fg['/controls/gear/brake-parking'] = 1
    # Get current heading
    heading = fg['/orientation/heading-deg']
 
    Other non-property related methods
    """
 
    def __init__( self, host = 'localhost', port = 5500 ):
        try:
            self.telnet = FGTelnet(host,port)
        except socket.error, msg:
            self.telnet = None
            raise socket.error, msg
 
    def __del__(self):
        # Ensure telnet connection is closed cleanly.
        self.quit();
 
    def __getitem__(self,key):
        """Get a FlightGear property value.
        Where possible the value is converted to the equivalent Python type.
        """
        s = self.telnet.get(key)[0]
        match = re.compile( '[^=]*=\s*\'([^\']*)\'\s*([^\r]*)\r').match( s )
        if not match:
            return None
        value,type = match.groups()
        #value = match.group(1)
        #type = match.group(2)
        if value == '':
            return None
 
        if type == '(double)':
            return float(value)
        elif type == '(int)':
            return int(value)
        elif type == '(bool)':
            if value == 'true':
                return 1
            else:
                return 0
        else:
            return value
 
    def __setitem__(self, key, value):
        """Set a FlightGear property value."""
        self.telnet.set( key, value )
 
    def quit(self):
        """Close the telnet connection to FlightGear."""
        if self.telnet:
            self.telnet.quit()
            self.telnet = None
 
    def view_next(self):
        #move to next view
        self.telnet.set( "/command/view/next", "true")
 
    def view_prev(self):
        #move to next view
        self.telnet.set( "/command/view/prev", "true")

    def run(self,command):
        """Run fgcommand."""
        return self.telnet.run(command)[0].replace('\r', '').replace('\n', '');

    def get_report(self):
        self.telnet.set('/sim/signals/fgreport', 1);
        while self.telnet.get('/sim/signals/fgreport') == 1:
            time.sleep(0.2);
        s = '\n'.join(self.telnet.get('/sim/fgreport/text')[1:-1]);
        return s;

if __name__ == '__main__':
    def get_report(fg):
        print fg.get_report();
        return 0;

    def sound_on(fg):
        fg['/sim/sound/enabled'] = 1;
        return 0;

    def sound_off(fg):
        fg['/sim/sound/enabled'] = 0;
        return 0;

    def get_nav_freq(fg):
        print 'NAV 1 Freq: ' + str(fg['/instrumentation/nav/frequencies/selected-mhz']);
        print 'NAV 2 Freq: ' + str(fg['/instrumentation/nav[1]/frequencies/selected-mhz']);
        return 0;

    def set_nav_freq(fg):
        try:
            fg['/instrumentation/nav/frequencies/selected-mhz'] = float(sys.argv[1]);
            fg['/instrumentation/nav[1]/frequencies/selected-mhz'] = float(sys.argv[1]);
        except IndexError:
            print 'Frequency value not given.';
            return 1;
        return 0;

    command_all = {
        'report': get_report,
        'soundon': sound_on,
        'soundoff': sound_off,
        'getnavfreq': get_nav_freq,
        'setnavfreq': set_nav_freq,
    };
    
    def usage():
        sys.stderr.write('Usage: %s %s\n' % (sys.argv[0], '|'.join([key for key in command_all])));
        exit(1);

    if (len(sys.argv) < 2):
        usage();
    command = sys.argv[1];
    fg = None;
    retcode = 0;
    try:
        func = command_all[command];
        sys.argv = sys.argv[1:];
        address, port = os.getenv('FG_TELNET').split(':');
        fg = FlightGear(address, int(port));
        retcode = func(fg);
        fg.quit();
    except KeyError:
        usage();
    except Exception, e:
        sys.stderr.write(str(e) + "\n");
        if (None != fg):
            fg.quit();
        exit(1);
    exit(retcode);

