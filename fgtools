#!/usr/bin/env python
#encoding=UTF-8

import sys, socket, getopt, os, subprocess, time, platform;
import xml.etree.ElementTree as ET;
from FGTelnet import FGTelnet;

MAX_INSTANCE_NUM = 5;

def get_report(instance_num, fg, args):
	print 'Instance ID:            ' + str(instance_num);
	print 'Aircraft:               ' + fg['/sim/description'];
	print 'Real World Time:        ' + fg['/sim/time/real/string'];
	print 'UTC Time:               ' + fg['/sim/time/utc/string'];
	print 'Local Time:             ' + fg['/instrumentation/clock/local-short-string'];
	print 'Position (lat lon):     %.6f %6f' % (fg['/position/latitude-deg'], fg['/position/longitude-deg']);

	if (fg['/autopilot/route-manager/active']):
		dist_total = fg['/autopilot/route-manager/total-distance'];
		dist_remaining = fg['/autopilot/route-manager/distance-remaining-nm'];
		print 'Total Distance:         %.2fnmi' % (dist_total);
		print 'Distance Remaining:     %.2fnmi' % (dist_remaining);
		print 'Distance Elapsed:       %.2fnmi' % (dist_total - dist_remaining);
		print 'Flight Time:            ' + fg['/autopilot/route-manager/flight-time-string'];
		print 'Estimated Time Enroute: ' + fg['/autopilot/route-manager/ete-string'];

	print 'Paused:                 ' + str(fg['/sim/freeze/clock'] and fg['/sim/freeze/master']);
	print 'Crashed:                ' + str(fg['/sim/crashed']);
	print 'FPS Limit:              ' + str(int(fg['/sim/frame-rate-throttle-hz']));
	print 'Current FPS:            ' + str(int(fg['/sim/frame-rate']));
	print '';

def sound_on(instance_num, fg, args):
	fg['/sim/sound/enabled'] = 1;
	print('Sound on.');
	return 0;

def sound_off(instance_num, fg, args):
	fg['/sim/sound/enabled'] = 0;
	print('Sound off.');
	return 0;

def pause(instance_num, fg, args):
	fg['/sim/freeze/master'] = fg['/sim/freeze/clock'] = 1;
	print('Simulation paused.');

def resume(instance_num, fg, args):
	fg['/sim/freeze/master'] = fg['/sim/freeze/clock'] = 0;
	print('Simulation resumed.');

def fps_limit(instance_num, fg, args):
	try:
		target_fps = int(args[0]);
		if (target_fps == 0):
			fg['/sim/gui/frame-rate-throttled'] = 0;
			fg['/sim/frame-rate-throttle-hz'] = 0;
		elif (target_fps <= 70 and target_fps >= 15):
			fg['/sim/gui/frame-rate-throttled'] = 1;
			fg['/sim/frame-rate-throttle-hz'] = target_fps;
		else:
			raise ValueError;
	except:
		sys.stderr.write('Invalid argument.');
		return 1;

def shutdown(instance_num, fg, args):
	fg.run('exit');

def fglaunch(instance_num, fg_port, args_input):
	fgfs_possible_exec = [
		'/usr/bin/fgfs',
		'/usr/local/bin/fgfs',
		os.getenv('FGFS_EXEC'),
	];
	fp_file = None;
	pausemgr_dist = 20;
	telnet_port = fg_port[0];
	httpd_port = fg_port[1];

	#Process Command Line
	try:
		opts, args = getopt.getopt(args_input, '+f:p:');
		if (len(args) < 1):
			raise Exception;
		aircraft = args[0];
		for opt, arg in opts:
			if opt == '-f':
				fp_file = os.path.abspath(arg);
			if opt == '-p':
				pausemgr_dist = int(arg);
	except Exception, e:
		print 'Usage: %s launch [-f FLIGHT_PLAN [-p PAUSE_DISTANCE_NMI]] Aircraft [Other_fgfs_Arguments] ...' % sys.argv[0];
		return 1;

	#Check if reboot is required
	if ('Linux' == platform.system() and os.path.isfile('/var/run/reboot-required')):
		print 'Please reboot your machine before launching FlightGear.';
		return 1;

	#Check if the port is available
	sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM);
	result = sock.connect_ex(('localhost', telnet_port));
	if result == 0:
		print 'Port %d is in use, please choose another instance number to launch.' % (telnet_port);
		return 1;

	#Get runway to takeoff
	if (None == fp_file):
		fp_params = ['--prop:/sim/rendering/particles=1'];
	else:
		try:
			fp_tree = ET.parse(fp_file);
			fp_root = fp_tree.getroot();
			airport = fp_root.findall('departure/airport')[0].text;
			runway = fp_root.findall('departure/runway')[0].text;
			fp_params = [
				'--airport='+airport,
				'--runway='+runway,
				'--flight-plan='+fp_file,
				'--prop:/autopilot/pausemgr-dist='+str(pausemgr_dist),
				'--prop:/sim/rendering/particles=0'
			];
		except Exception, e:
			sys.stderr.write('Failed to parse Flight Plan: ' + str(e) + '\n');
			exit(1);

	#Launch FlightGear
	for i in fgfs_possible_exec:
		if os.path.isfile(i):
			fgfs_exec = i;
			break;
	if (fgfs_exec == None):
		sys.stderr.write('Executable of fgfs not found.\n');
		return 1;

	return subprocess.call(
		[
			fgfs_exec
			,'--telnet=socket,bi,60,,%d,tcp' % (telnet_port)
			,'--httpd=' + str(httpd_port)
			,'--aircraft=' + aircraft
		]
		+ fp_params
		+ args[1:]
	);

if __name__ == '__main__':
	command_all = {
		'report': get_report,
		'soundon': sound_on,
		'soundoff': sound_off,
		'pause': pause,
		'resume': resume,
		'shutdown': shutdown,
		'fpslimit': fps_limit,
		'launch': fglaunch,
	};
	instance_num_all = [];
	fg_telnet_ports = os.getenv('FG_TELNET_PORTS').split(',');
	fg_httpd_ports = os.getenv('FG_HTTPD_PORTS').split(',');
	status = 0;

	try:
		for n in sys.argv[1]:
			if (int(n) > MAX_INSTANCE_NUM - 1):
				raise ValueError;
			instance_num_all.append(int(n));
	except Exception, e:
		sys.stderr.write('Invalid Instance Number.\n');
		exit(1);

	for instance_num in instance_num_all:
		func = None;
		try:
			func = command_all[sys.argv[2]];
		except:
			sys.stderr.write('Invalid Command.\n');
			exit(1);

		if (func == fglaunch):
			exit(func(instance_num,
				(int(fg_telnet_ports[instance_num]), int(fg_httpd_ports[instance_num])),
				sys.argv[3:]));

		fg = None;
		try:
			fg = FGTelnet(port = fg_telnet_ports[instance_num]);
			func(instance_num, fg, sys.argv[3:]);
			fg.quit();
		except IndexError:
			sys.stderr.write("Connection Timeout.\n");
			status = 2;
		except Exception, e:
			sys.stderr.write(str(e) + "\n");
			status = 2;
	exit(status);

