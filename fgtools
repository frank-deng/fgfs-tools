#!/usr/bin/env python
#encoding=UTF-8

import sys, getopt, os, subprocess, time, platform;
import xml.etree.ElementTree as ET;
from FGTelnet import FGTelnet;

TELNET_ADDR_BASE = 5400;

def get_report(fg, args):
	fg['/command/fgreport/signal'] = 1;
	while fg['/command/fgreport/signal']:
		time.sleep(0.1);
	print fg['/command/fgreport/text'];
	return 0;

def sound_on(fg, args):
	fg['/sim/sound/enabled'] = 1;
	print('Sound on.');
	return 0;

def sound_off(fg, args):
	fg['/sim/sound/enabled'] = 0;
	print('Sound off.');
	return 0;

def pause(fg, args):
	fg['/sim/freeze/master'] = fg['/sim/freeze/clock'] = 1;
	print('Simulation paused.');

def resume(fg, args):
	fg['/sim/freeze/master'] = fg['/sim/freeze/clock'] = 0;
	print('Simulation resumed.');

def fps_limit(fg, args):
	if (0 == len(args)):
		target_fps = fg['/sim/frame-rate-throttle-hz'];
		if '0' == fg['/sim/gui/frame-rate-throttled']:
			print('Frame rate unlimited.');
		else:
			print('Frame rate limited to %d fps.' % target_fps);
	else:
		try:
			target_fps = int(args[0]);
			if (target_fps == 0):
				fg['/sim/gui/frame-rate-throttled'] = 0;
				fg['/sim/frame-rate-throttle-hz'] = 0;
				print('Frame rate limitation is set to unlimited.');
			elif (target_fps <= 70 and target_fps >= 15):
				fg['/sim/gui/frame-rate-throttled'] = 1;
				fg['/sim/frame-rate-throttle-hz'] = target_fps;
				print('Frame rate limitation is set to %d fps.' % target_fps);
			else:
				raise ValueError;
		except:
			sys.stderr.write('Invalid argument.');
			return 1;

def fglaunch(instance_num, args_input):
	#Check if reboot is required
	if ('Linux' == platform.system() and os.path.isfile('/var/run/reboot-required')):
		print 'Please reboot your machine before launching FlightGear.';
		return 1;

	fgfs_possible_exec = [
		'/usr/bin/fgfs',
		'/usr/local/bin/fgfs',
		os.getenv('FGFS_EXEC'),
	];

	try:
		opts, args = getopt.getopt(args_input, '+f:');
		if (len(args) < 1):
			raise Exception;
	except Exception, getopt.GetoptError:
		print 'Usage: launch [-f FLIGHT_PLAN] AIRCRAFT [Other_fgfs_Arguments] ...';
		return 1;

	fp_file = None;
	aircraft = args[0];
	for opt, arg in opts:
		if opt == '-f':
			fp_file = os.path.abspath(arg);

	#Get runway to takeoff
	if (None == fp_file):
		fp_params = ['--prop:/sim/rendering/particles=1'];
	else:
		try:
			fp_tree = ET.parse(fp_file);
			fp_root = fp_tree.getroot();
			airport = fp_root.findall('departure/airport')[0].text;
			runway = fp_root.findall('departure/runway')[0].text;
			fp_params = [
				'--airport='+airport,
				'--runway='+runway,
				'--flight-plan='+fp_file,
				'--prop:/autopilot/pausemgr-dist=20',
				'--prop:/sim/rendering/particles=0'
			];
		except Exception, e:
			sys.stderr.write('Failed to parse Flight Plan: ' + str(e) + '\n');
			exit(1);

	#Launch FlightGear
	for i in fgfs_possible_exec:
		if os.path.isfile(i):
			fgfs_exec = i;
			break;
	if (fgfs_exec == None):
		sys.stderr.write('Executable of fgfs not found.\n');
		return 1;

	return subprocess.call(
		[
			fgfs_exec
			,'--props=' + str(TELNET_ADDR_BASE + instance_num)
			,'--props=' + str(TELNET_ADDR_BASE + 10 + instance_num)
			,'--props=' + str(TELNET_ADDR_BASE + 20 + instance_num)
			,'--aircraft=' + aircraft
		]
		+ fp_params
		+ args[1:]
	);

if __name__ == '__main__':
	command_all = {
		'report': get_report,
		'soundon': sound_on,
		'soundoff': sound_off,
		'pause': pause,
		'resume': resume,
		'fpslimit': fps_limit,
	};
	instance_num_all = None;
	try:
		instance_num_all = [int(n) for n in sys.argv[1]];
	except:
		sys.stderr.write('Invalid Instance Number.\n');
		exit(1);

	if ('launch' == sys.argv[2]):
		exit(fglaunch(instance_num_all[0], sys.argv[3:]));

	for instance_num in instance_num_all:
		print('*** Instance %d ***' % instance_num);
		func = None;
		try:
			func = command_all[sys.argv[2]];
		except:
			sys.stderr.write('Invalid Command.\n');
			exit(1);

		fg = None;
		try:
			fg = FGTelnet(port = TELNET_ADDR_BASE + instance_num);
			func(fg, sys.argv[3:]);
			fg.quit();
		except IndexError:
			sys.stderr.write("Connection Timeout.\n");
		except Exception, e:
			sys.stderr.write(str(e) + "\n");
	exit(0);

