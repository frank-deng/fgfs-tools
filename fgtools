#!/usr/bin/env python
#encoding=UTF-8

import sys, urllib2, getopt, os, subprocess, platform;
import xml.etree.ElementTree as ET;

def sound_on(instance_num, fg, args):
	urllib2.urlopen(urllib2.Request(fg + '/props/sim/sound?submit=set&enabled=1'));
	return 0;

def sound_off(instance_num, fg, args):
	urllib2.urlopen(urllib2.Request(fg + '/props/sim/sound?submit=set&enabled=0'));
	return 0;

def fps_limit(instance_num, fg, args):
	try:
		target_fps = int(args[0]);
		if (target_fps == 0):
			urllib2.urlopen(urllib2.Request(fg + '/props/sim/gui?submit=set&frame-rate-throttled=0'));
			urllib2.urlopen(urllib2.Request(fg + '/props/sim?submit=set&frame-rate-throttle-hz=0'));
		elif (target_fps <= 70 and target_fps >= 15):
			urllib2.urlopen(urllib2.Request(fg + '/props/sim/gui?submit=set&frame-rate-throttled=1'));
			urllib2.urlopen(urllib2.Request(fg + '/props/sim?submit=set&frame-rate-throttle-hz=' + str(target_fps)));
		else:
			raise ValueError;
	except:
		sys.stderr.write('Invalid argument.');
		return 1;

def shutdown(instance_num, fg, args):
	urllib2.urlopen(urllib2.Request(fg + '/run.cgi?value=exit'));

def cpu_temp():
	fp = open('/sys/class/thermal/thermal_zone0/temp', 'r');
	text = fp.readline();
	fp.close();
	result_c = int((float)(text) / 1000.0);
	result_f = float(result_c * 9.0 / 5.0 + 32.0);
	return (result_c, result_f);

def gpu_temp():
	# Fetch XML data from nvidia-smi
	nvidia_smi = subprocess.Popen(['nvidia-smi', '-q', '-x'], stdout=subprocess.PIPE);
	stdout, stderr = nvidia_smi.communicate();
	if (nvidia_smi.returncode != 0):
		raise Exception('Failed to fetch GPU Temperature.');

	# Parse XML data
	tree = ET.fromstring(stdout);
	result_c = int(list(tree.findall('./gpu/temperature/gpu_temp'))[0].text.replace(' C', ''));
	result_f = float(result_c * 9.0 / 5.0 + 32.0);
	return (result_c, result_f);

def temperature(args):
	status = 0;
	try:
		print('CPU:  %d C / %.1f F' % cpu_temp());
	except Exception, e:
		sys.stderr.write(str(e) + '\n');
		status = 1;
	try:
		print('GPU:  %d C / %.1f F' % gpu_temp());
	except Exception, e:
		sys.stderr.write(str(e) + '\n');
		status = 1;
	return status;

def route2kml(args):
	# Handle command line
	stream_input = sys.stdin;
	stream_output = sys.stdout;
	route_name = 'Route'
	status = 0;
	try:
		if (args[0] in ('-h', '--help', '-?')):
			sys.stderr.write('''Usage: %s route2kml [INPUT_FILE] [OUTPUT_FILE]

	If INPUT_FILE is not specified, stdin is used.
	If OUTPUT_FILE is not specified, stdout is used.
''' % sys.argv[0]);
			return 1;
		stream_input = open(args[0], 'r');
		route_name = os.path.basename(args[0]);
	except IndexError:
		stream_input = sys.stdin;
	try:
		stream_output = open(args[1], 'w');
	except IndexError:
		stream_output = sys.stdout;

	try:
		# Fetch waypoints
		waypoints = [];
		tree = ET.parse(stream_input);
		root = tree.getroot();
		wp_all = root.findall('route/wp');
		for wp in wp_all:
			lon = wp.find('lon');
			lat = wp.find('lat');
			if (lon != None or lat != None):
				waypoints.append((float(lon.text), float(lat.text)));

		# Write to KML
		stream_output.write("""<?xml version="1.0" encoding="UTF-8"?>
<kml xmlns="http://earth.google.com/kml/2.2" xmlns:gx="http://www.google.com/kml/ext/2.2">
	<Document>
		<name>""" + route_name + """</name>
		<Style id="track">
			<BalloonStyle>
				<displayMode>default</displayMode>
			</BalloonStyle>
			<IconStyle>
				<scale>1.000000</scale>
				<Icon>
					<href>/usr/share/kde4/apps/marble/data/bitmaps/default_location.png</href>
				</Icon>
				<hotSpot x="0.500000" y="0.500000" xunits="fraction" yunits="fraction"/>
			</IconStyle>
			<LineStyle>
				<color>c80008e2</color>
				<width>4</width>
			</LineStyle>
			<ListStyle/>
			<PolyStyle>
				<fill>1</fill>
				<outline>1</outline>
			</PolyStyle>
		</Style>
		<StyleMap id="map-track">
			<Pair>
				<key>normal</key>
				<styleUrl>#track</styleUrl>
			</Pair>
		</StyleMap>
		<Placemark>
			<name>""" + route_name + """</name>
			<styleUrl>#map-track</styleUrl>
			<gx:MultiTrack>
				<gx:Track>
""");

		for wp in waypoints:
			stream_output.write('                     <gx:coord>' + str(wp[0]) + ' ' + str(wp[1]) + '</gx:coord>\n');

		stream_output.write("""                </gx:Track>
			</gx:MultiTrack>
		</Placemark>
	</Document>
</kml>
""");

	except Exception, e:
		sys.stderr.write(str(e) + '\n');
		status = 1;

	stream_input.close();
	stream_output.close();
	return status;

def fglaunch(args_input):
	help_info = 'Usage: %s launch [-f FLIGHT_PLAN [-p PAUSE_DISTANCE_NMI]] Aircraft [Other_fgfs_Arguments] ...' % sys.argv[0];
	fgfs_possible_exec = [
		os.getenv('FGFS_BIN'),
		'/usr/bin/fgfs',
		'/usr/local/bin/fgfs',
	];
	fg_httpd_ports = os.getenv('FG_HTTPD_PORTS').split(',');
	instance_num = None;
	fp_file = None;
	pausemgr_dist = 20;

	#Process Command Line
	try:
		opts, args = getopt.getopt(args_input, '+f:p:');
		if (len(args) < 1):
			raise Exception;
		aircraft = args[0];
		for opt, arg in opts:
			if opt == '-f':
				fp_file = os.path.abspath(arg);
			if opt == '-p':
				pausemgr_dist = int(arg);
	except Exception, e:
		print help_info;
		return 1;

	#Check if reboot is required
	if ('Linux' == platform.system() and os.path.isfile('/var/run/reboot-required')):
		sys.stderr.write('Please reboot your machine before launching FlightGear.\n');
		return 1;

	#Check if there is any instance not in use
	httpd_port = None;
	for i in range(len(fg_httpd_ports)):
		httpd_port = int(fg_httpd_ports[i]);
		sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM);
		httpd_result = sock.connect_ex(('localhost', httpd_port));
		if httpd_result == 0:
			continue;
		else:
			instance_num = i;
			break;
	if (None == instance_num):
		sys.stderr.write('Unable to launch more FlightGear Instance.\n');
		return 1;
	else: 
		print 'Use instance #' + str(instance_num) + '.';

	#Get runway to takeoff
	if (None == fp_file):
		fp_params = ['--prop:/sim/rendering/particles=1'];
	else:
		try:
			fp_tree = ET.parse(fp_file);
			fp_root = fp_tree.getroot();
			airport = fp_root.findall('departure/airport')[0].text;
			runway = fp_root.findall('departure/runway')[0].text;
			fp_params = [
				'--airport='+airport,
				'--runway='+runway,
				'--flight-plan='+fp_file,
				'--prop:/autopilot/pausemgr-dist='+str(pausemgr_dist),
				'--prop:/sim/rendering/particles=0'
			];
		except Exception, e:
			sys.stderr.write('Failed to parse Flight Plan: ' + str(e) + '\n');
			exit(1);

	#Launch FlightGear
	for i in fgfs_possible_exec:
		if i == None:
			continue;
		if os.path.isfile(i):
			fgfs_exec = i;
			break;
	if (fgfs_exec == None):
		sys.stderr.write('Executable of fgfs not found.\n');
		return 1;

	return subprocess.call(
		[
			fgfs_exec
			,'--httpd=' + str(httpd_port)
			,'--aircraft=' + aircraft
		]
		+ fp_params
		+ args[1:]
	);

if __name__ == '__main__':
	command_all = {
		'soundon': (sound_on, 1),
		'soundoff': (sound_off, 1),
		'shutdown': (shutdown, 1),
		'fpslimit': (fps_limit, 1),
		'launch': (fglaunch, 0),
		'temperature': (temperature, 0),
		'route2kml': (route2kml, 0),
	};

	# Fetch command
	func_info = None;
	try:
		func_info = command_all[sys.argv[1]];
	except:
		print('Available Commands:\n');
		for cmd in sorted(command_all.iterkeys()):
			print('   ' + cmd);
		print('');
		exit(1);

	# Not a multi-instance command
	if (func_info[1] == 0):
		try:
			exit(func_info[0](sys.argv[2:]));
		except KeyboardInterrupt:
			exit(0);

	# Multi-instance command
	fg_httpd_ports = os.getenv('FG_HTTPD_PORTS').split(',');
	instance_num_all = [];
	status = 0;
	try:
		for n in sys.argv[2]:
			if (int(n) > len(fg_httpd_ports) - 1):
				raise ValueError;
			instance_num_all.append(int(n));
	except Exception, e:
		sys.stderr.write('Invalid Instance Number.\n');
		exit(1);

	for instance_num in instance_num_all:
		fg = None;
		try:
			fg = 'http://localhost:' + str(fg_httpd_ports[instance_num]);
			func_info[0](instance_num, fg, sys.argv[3:]);
		except Exception, e:
			sys.stderr.write(str(e) + "\n");
			status = 2;
	exit(status);

