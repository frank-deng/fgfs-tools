#!/usr/bin/python
#encoding=UTF-8

import sys, os;
from FlightGear import FlightGear;

if __name__ == '__main__':
    def get_nav_freq(fg, args):
        print 'NAV 1 Freq: ' + str(fg['/instrumentation/nav/frequencies/selected-mhz']);
        print 'NAV 2 Freq: ' + str(fg['/instrumentation/nav[1]/frequencies/selected-mhz']);
        return 0;

    def set_nav_freq(fg, args):
        try:
            fg['/instrumentation/nav/frequencies/selected-mhz'] = float(args[0]);
            fg['/instrumentation/nav[1]/frequencies/selected-mhz'] = float(args[0]);
        except IndexError:
            print 'Frequency value not given.';
            return 1;
        return 0;

    def load_route(fg, args):
        try:
            fg['/autopilot/route-manager/file-path'] = os.path.abspath(args[0]);
            fg['/autopilot/route-manager/input'] = '@LOAD';
            fg['/autopilot/route-manager/departure/sid'] = 'DEFAULT';
            fg['/autopilot/route-manager/destination/approach'] = 'DEFAULT';
            fg['/autopilot/route-manager/input'] = '@ACTIVATE';
            fg['/autopilot/route-manager/input'] = '@JUMP0';
        except IndexError:
            print 'File path not given.';
            return 1;
        return 0;

    def descending_manager(fg, args):
        enabled = fg['/autopilot/descending-manager/active'];
        if (1 == fg['/sim/freeze/master'] and 1 == fg['/sim/freeze/clock']):
            print('Simulation paused.');
        elif (0 != len(args)):
            try:
                altitude = int(args[0]);
                if (altitude <= 0):
                    fg['/autopilot/descending-manager/active'] = 0;
                    print('Descending Manager deactivated.');
                else:
                    fg['/autopilot/descending-manager/target-altitude'] = altitude;
                    fg['/autopilot/descending-manager/active'] = 1;
                    print('Descending Manager activated.'); 
                    print('Target altitude: %dft.' % int(fg['/autopilot/descending-manager/target-altitude']));
            except ValueError:
                sys.stderr.write('Invalid number given');
                return 1;
        elif ('1' == enabled):
            print('Descending Manager enabled.'); 
            print('Target altitude: %dft.' % int(fg['/autopilot/descending-manager/target-altitude']));
        else:
            print('Descending Manager is inactive.');
        return 0;
    
    def refuel(fg, args):
        try:
            if float(fg['/velocities/groundspeed-kt']) > 0.1:
                print ('Unable to refuel while the aircraft is moving.');
                return 1;
            else:
                if (0 == len(args)):
                    if 1 != fg['/autopilot/route-manager/active']:
                        print('Sorry, you haven\'t activated your route yet.');
                        print('And I cannot determine how much fuel needed.');
                        return 1;
                    range = float(fg['/limits/estimated-range-nm']);
                    route_len = float(fg['/autopilot/route-manager/total-distance']);
                    fuel_norm = route_len / range;
                else:
                    fuel_norm = float(args[0]) / 100.0;

                if (fuel_norm > 1.0):
                    fuel_norm = 1.0;
                elif (fuel_norm < 0.1):
                    fuel_norm = 0.1;
                fg['/consumables/fuel/tank/level-norm'] = fuel_norm;
                fg['/consumables/fuel/tank[1]/level-norm'] = fuel_norm;
                fg['/consumables/fuel/tank[2]/level-norm'] = fuel_norm;
                return 0;
        except ValueError:
            sys.stderr.write('Invalid number given.\n');
            return 1;

    command_all = {
        'getnavfreq': get_nav_freq,
        'setnavfreq': set_nav_freq,
        'descending': descending_manager,
        'loadroute': load_route,
        'refuel': refuel,
    };

    if (len(sys.argv) < 2):
        sys.stderr.write('Command not given.\n');
        exit(1);

    command = sys.argv[1];
    fg = None;
    retcode = 0;
    try:
        func = command_all[command];
        address, port = os.getenv('FG_TELNET').split(':');
        fg = FlightGear(address, int(port));
        retcode = func(fg, sys.argv[2:]);
        fg.quit();
    except KeyError:
        sys.stderr.write('Bad command.\n');
        exit(1);
    except Exception, e:
        sys.stderr.write(str(e) + "\n");
        if (None != fg):
            fg.quit();
        exit(1);
    exit(retcode);

