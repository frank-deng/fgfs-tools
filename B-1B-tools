#!/usr/bin/python
#encoding=UTF-8

import sys, os, time;
from FlightGear import FlightGear;

def ground_refuel_max(fg, args):
    if float(fg['/velocities/groundspeed-kt']) > 0.1:
        print ('Unable to refuel while the aircraft is moving.');
        return 1;
    else:
        fg['/consumables/fuel/tank[0]/level-norm'] = 1.0;
        fg['/consumables/fuel/tank[1]/level-norm'] = 1.0;
        fg['/consumables/fuel/tank[2]/level-norm'] = 1.0;
        fg['/consumables/fuel/tank[3]/level-norm'] = 1.0;
        fg['/consumables/fuel/tank[4]/level-norm'] = 1.0;
        fg['/consumables/fuel/tank[5]/level-norm'] = 1.0;
        fg['/consumables/fuel/tank[6]/level-norm'] = 1.0;
        fg['/consumables/fuel/tank[7]/level-norm'] = 1.0;
        return 0;

def magic_refuel(fg, args):
    amount = 0.95;
    try:
        amount = float(args[0]);
        if amount > 0.95:
            amount = 0.95;
        elif amount < 0:
            amount = 0;
    except:
        amount = 0.95;

    if 0 == fg['/armament/magic-refuel/signal']:
        print 'Refuel started.';
        fg['/armament/magic-refuel/amount'] = amount;
        fg['/armament/magic-refuel/signal'] = 1;
    else:
        print 'Refuel already ongoing.';

def magic_refuel_daemon(fg, args):
    try:
        refuel_points = args[0];
    except:
        if 1 == fg['/armament/magic-refuel/daemon']:
            print 'Magic Refuel Daemon is running.';
            print 'Refuel Points: ';
            print fg['/armament/magic-refuel/refuel-points'];
        else:
            print 'Magic Refuel Daemon is not running.';
        return 0;

    if refuel_points == 'off':
        fg['/armament/magic-refuel/daemon'] = 0;
    else:
        fg['/armament/magic-refuel/daemon'] = 1;
        fg['/armament/magic-refuel/refuel-points'] = refuel_points;

if __name__ == '__main__':
    command_all = {
        'refuel': ground_refuel_max,
        'mrefuel': magic_refuel,
        'mrefueld': magic_refuel_daemon,
    };

    if (len(sys.argv) < 2):
        sys.stderr.write('Command not given.\n');
        exit(1);

    command = sys.argv[1];
    fg = None;
    retcode = 0;
    running = True;
    try:
        func = command_all[command];
        address, port = os.getenv('FG_TELNET').split(':');
        while running:
            try:
                fg = FlightGear(address, int(port));
                retcode = func(fg, sys.argv[2:]);
                running = False;
            except IndexError:
                pass;
        fg.quit();
    except KeyError:
        sys.stderr.write('Bad command.\n');
        exit(1);
    except Exception, e:
        sys.stderr.write(str(e) + "\n");
        if (None != fg):
            fg.quit();
        exit(1);
    exit(retcode);

